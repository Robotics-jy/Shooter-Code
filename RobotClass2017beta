
package org.usfirst.frc.team5938.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
//import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
//import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;

    SpeedController motor1; //SpeedController motor2;
    Joystick logitechController = new Joystick(0);
	
    //Tank
    //RobotDrive myDrive;
	//Joystick left, right;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        
    	
    	//myDrive = new RobotDrive(0,1);
    	//left = new Joystick(1);
    	//right = new Joystick(0);
        motor1 = new VictorSP(3);
        //motor2 = new VictorSP(2);
    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {

    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	switch(autoSelected) {
    	case customAuto:
        //Put custom auto code here   
            break;
    	case defaultAuto:
    	default:
    	//Put default auto code here
            break;
    	}
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
       //Tank
    	/*
    	while (isOperatorControl() && isEnabled()) {
    		myDrive.tankDrive(left,  right);
    		Timer.delay(0.01);
    	
    	
    	}
    	*/
    	
    	//************************************************Toggle fail
    	/*boolean toggle=true;
    	boolean motor=false;
    	
    	if(toggle && logitechController.getRawButton(1)){
    		toggle = false;
    		if(){
    			motor=false;
    			motor2.set(.2);
    			
    		}else{
    			motor=true;
    			motor2.set(0);
    		
    		}
    	}else if(logitechController.getRawButton(1)==false){
    		toggle = true;
    	}*/
    	//---------------------------------------------------- toggle success
    	/*boolean motorStatus = false;
    	boolean previousButton=false;
    	boolean currentButton=false;
    	
    	
    	previousButton = currentButton;
    	currentButton=logitechController.getRawButton(1);
    	
    	if (currentButton && !previousButton)
    	{
    		motorStatus = motorStatus ? false : true;
    	}
    	motor2.set( (double)(motorStatus ? 1 : 0));
    	}
    */
    	   
    	//This code makes it so if you hold the 1 button the motor runs, if button is released then the motor stops
    	//Shooter Code 2017
    	//Motor stutters though
    	if (logitechController.getRawButton(1)==true){
    		motor1.set(1);
    		}
    	else if(logitechController.getRawButton(1)==false){
    		motor1.set(0);
    	}
    		
   	
    	
    	//motor1.set(Math.pow(logitechController.getRawAxis(0) ,3));
   	
    	//motor2.set(Math.pow(logitechController.getRawAxis(0) ,3));
    	
    }
    
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
    
}
